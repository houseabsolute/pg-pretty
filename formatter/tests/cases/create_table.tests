++++
CREATE TABLE
----
CREATE TABLE films (
    code        char(5) CONSTRAINT firstkey PRIMARY KEY,
    title       varchar(40) NOT NULL,
    did         integer NOT NULL,
    date_prod   date,
    kind        varchar(10),
    len         interval hour to minute
)
----
CREATE TABLE films (
    code       char(5) CONSTRAINT firstkey PRIMARY KEY,
    title      varchar(40) NOT NULL,
    did        int NOT NULL,
    date_prod  date,
    kind       varchar(10),
    len        interval HOUR TO MINUTE
)
----

++++
CREATE TABLE with GENERATED BY ... AS IDENTITY
----
CREATE TABLE distributors (
     did    integer PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
     name   varchar(40) NOT NULL CHECK (name <> '')
)
----
CREATE TABLE distributors (
    did   int PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
    name  varchar(40) NOT NULL CHECK ( name <> '' )
)
----

++++
CREATE TABLE with array of array column
----
CREATE TABLE array_int (
    vector  int[][2]
)
----
CREATE TABLE array_int (
    vector  int[][2]
)
----

++++
CREATE TABLE with constraint
----
CREATE TABLE films (
    code        char(5),
    title       varchar(40),
    did         integer,
    date_prod   date,
    kind        varchar(10),
    len         interval hour to minute,
    CONSTRAINT production UNIQUE(date_prod)
)
----
CREATE TABLE films (
    code       char(5),
    title      varchar(40),
    did        int,
    date_prod  date,
    kind       varchar(10),
    len        interval HOUR TO MINUTE,
    CONSTRAINT production UNIQUE (date_prod)
)
----

++++
CREATE TABLE with CHECK on column
----
CREATE TABLE distributors (
    did     integer CHECK (did > 100),
    name    varchar(40)
)
----
CREATE TABLE distributors (
    did   int CHECK ( did > 100 ),
    name  varchar(40)
)
----

++++
CREATE TABLE with CONSTRAINT ... CHECK on table
----
CREATE TABLE distributors (
    did     integer,
    name    varchar(40),
    CONSTRAINT con1 CHECK (did > 100 AND name <> '')
)
----
CREATE TABLE distributors (
    did   int,
    name  varchar(40),
    CONSTRAINT con1 CHECK (
        did > 100
        AND name <> ''
    )
)
----

++++
CREATE TABLE with separate multi-column PRIMARY KEY clause
----
CREATE TABLE films (
    code        char(5),
    title       varchar(40),
    did         integer,
    date_prod   date,
    kind        varchar(10),
    len         interval hour to minute,
    CONSTRAINT code_title PRIMARY KEY(code,title)
)
----
CREATE TABLE films (
    code       char(5),
    title      varchar(40),
    did        int,
    date_prod  date,
    kind       varchar(10),
    len        interval HOUR TO MINUTE,
    CONSTRAINT code_title PRIMARY KEY ( code, title )
)
----

++++
CREATE TABLE with separate single-column PRIMARY KEY clause
----
CREATE TABLE distributors (
    did     integer,
    name    varchar(40),
    PRIMARY KEY(did)
)
----
CREATE TABLE distributors (
    did   int,
    name  varchar(40),
    PRIMARY KEY (did)
)
----

++++
CREATE TABLE with various DEFAULT clauses
----
CREATE TABLE distributors (
    name      varchar(40) DEFAULT 'Luso Films',
    did       integer DEFAULT nextval('distributors_serial'),
    modtime   timestamp DEFAULT current_timestamp
)
----
CREATE TABLE distributors (
    name     varchar(40) DEFAULT 'Luso Films',
    did      int DEFAULT nextval('distributors_serial'),
    modtime  timestamp DEFAULT current_timestamp
)
----

++++
CREATE TABLE with named NOT NULL constraint
----
CREATE TABLE distributors (
    did     integer CONSTRAINT no_null NOT NULL,
    name    varchar(40) NOT NULL
)
----
CREATE TABLE distributors (
    did   int NOT NULL,
    name  varchar(40) NOT NULL
)
----

++++
CREATE TABLE with UNIQUE columns
----
CREATE TABLE distributors (
    did     integer,
    name    varchar(40) UNIQUE
)
----
CREATE TABLE distributors (
    did   int,
    name  varchar(40) UNIQUE
)
----

++++
CREATE TABLE with separate UNIQUE constraint
----
CREATE TABLE distributors (
    did     integer,
    name    varchar(40),
    UNIQUE(name)
)
----
CREATE TABLE distributors (
    did   int,
    name  varchar(40),
    UNIQUE (name)
)
----

++++
CREATE TABLE with WITH clause on constraint and table
----
CREATE TABLE distributors (
    did     integer,
    name    varchar(40),
    UNIQUE(name) WITH (fillfactor=70)
)
WITH (fillfactor=70)
----
CREATE TABLE distributors (
    did   int,
    name  varchar(40),
    UNIQUE (name) WITH ( fillfactor = 70 )
)
WITH ( fillfactor = 70 )
----

++++
CREATE TABLE with EXCLUDE constraint
----
CREATE TABLE circles (
    c circle,
    EXCLUDE USING gist (c WITH &&)
)
----
CREATE TABLE circles (
    c  circle,
    EXCLUDE USING gist ( c WITH && )
)
----

++++
CREATE TABLE with TABLESPACE
----
CREATE TABLE cinemas (
        id serial,
        name text,
        location text
) TABLESPACE diskvol1
----
CREATE TABLE cinemas (
    id        serial,
    name      text,
    location  text
)
TABLESPACE diskvol1
----

++++
CREATE TABLE with PARTITION BY RANGE (column)
----
CREATE TABLE measurement (
    logdate         date not null,
    peaktemp        int,
    unitsales       int
) PARTITION BY RANGE (logdate)
----
CREATE TABLE measurement (
    logdate    date NOT NULL,
    peaktemp   int,
    unitsales  int
)
PARTITION BY RANGE (logdate)
----

++++
CREATE TABLE with PARTITION BY RANGE (functions)
----
CREATE TABLE measurement_year_month (
    logdate         date not null,
    peaktemp        int,
    unitsales       int
) PARTITION BY RANGE (EXTRACT(YEAR FROM logdate), EXTRACT(MONTH FROM logdate))
----
CREATE TABLE measurement_year_month (
    logdate    date NOT NULL,
    peaktemp   int,
    unitsales  int
)
PARTITION BY RANGE ( date_part( 'year', logdate ), date_part( 'month', logdate ) )
----

++++
CREATE TABLE with PARTITION BY LIST (function)
----
CREATE TABLE cities (
    city_id      bigserial not null,
    name         text not null,
    population   bigint
) PARTITION BY LIST (left(lower(name), 1))
----
CREATE TABLE cities (
    city_id     bigserial NOT NULL,
    name        text NOT NULL,
    population  bigint
)
PARTITION BY LIST ( left( lower(name), 1 ) )
----

++++
CREATE TABLE with PARTITION FOR VALUES FROM ... TO
----
CREATE TABLE measurement_y2016m07
    PARTITION OF measurement (
    unitsales DEFAULT 0
) FOR VALUES FROM ('2016-07-01') TO ('2016-08-01')
----
CREATE TABLE measurement_y2016m07
PARTITION OF measurement (
    unitsales  DEFAULT 0
)
FOR VALUES FROM ('2016-07-01') TO ('2016-08-01')
----

++++
CREATE TABLE with PARTITION FOR VALUES FROM ... TO using MINVALUE
----
CREATE TABLE measurement_ym_older
    PARTITION OF measurement_year_month
    FOR VALUES FROM (MINVALUE, MINVALUE) TO (2016, 11)
----
CREATE TABLE measurement_ym_older
PARTITION OF measurement_year_month
FOR VALUES FROM ( MINVALUE, MINVALUE ) TO ( 2016, 11 )
----

++++
CREATE TABLE with PARTITION FOR VALUES FROM ... TO using MINVALUE
----
CREATE TABLE measurement_ym_older
    PARTITION OF measurement_year_month
    FOR VALUES FROM (2016, 11)
    TO (MAXVALUE, MAXVALUE) 
----
CREATE TABLE measurement_ym_older
PARTITION OF measurement_year_month
FOR VALUES FROM ( 2016, 11 ) TO ( MAXVALUE, MAXVALUE )
----

++++
CREATE TABLE with constraint with PARTITION FOR VALUES IN
----
CREATE TABLE cities_ab
    PARTITION OF cities (
    CONSTRAINT city_id_nonzero CHECK (city_id != 0)
) FOR VALUES IN ('a', 'b')
----
CREATE TABLE cities_ab
PARTITION OF cities (
    CONSTRAINT city_id_nonzero CHECK ( city_id <> 0 )
)
FOR VALUES IN ( 'a', 'b' )
----

++++
CREATE TABLE with PARTITION FOR VALUES ... BY RANGE
----
CREATE TABLE cities_ab
    PARTITION OF cities (
    CONSTRAINT city_id_nonzero CHECK (city_id != 0)
) FOR VALUES IN ('a', 'b') PARTITION BY RANGE (population)
----
CREATE TABLE cities_ab
PARTITION OF cities (
    CONSTRAINT city_id_nonzero CHECK ( city_id <> 0 )
)
FOR VALUES IN ( 'a', 'b' )
PARTITION BY RANGE (population)
----

++++
CREATE TABLE with PARTITION FOR VALUES IN
----
CREATE TABLE cities_ab
    PARTITION OF cities (
    CONSTRAINT city_id_nonzero CHECK (city_id != 0)
) FOR VALUES IN ('a', 'b') PARTITION BY RANGE (population)
----
CREATE TABLE cities_ab
PARTITION OF cities (
    CONSTRAINT city_id_nonzero CHECK ( city_id <> 0 )
)
FOR VALUES IN ( 'a', 'b' )
PARTITION BY RANGE (population)
----

++++
CREATE TABLE with PARTITION FOR VALUES IN numeric
----
CREATE TABLE cities_ab
    PARTITION OF cities
FOR VALUES IN (1, 2, 3)
----
CREATE TABLE cities_ab
PARTITION OF cities
FOR VALUES IN ( 1, 2, 3 )
----

++++
CREATE TABLE with PARTITION FOR VALUES IN with NULL
----
CREATE TABLE cities_ab
    PARTITION OF cities FOR VALUES IN (NULL, 1)
----
CREATE TABLE cities_ab
PARTITION OF cities
FOR VALUES IN ( NULL, 1 )
----

++++
CREATE TABLE with PARTITION FOR VALUES using numeric values
----
CREATE TABLE cities_ab
    PARTITION OF cities
    FOR VALUES FROM (1, 2) TO (3, 4)
----
CREATE TABLE cities_ab
PARTITION OF cities
FOR VALUES FROM ( 1, 2 ) TO ( 3, 4 )
----

++++
CREATE TABLE with PARTITION FOR VALUES using NULL to 42
----
CREATE TABLE cities_ab
    PARTITION OF cities
    FOR VALUES FROM (NULL) TO (42)
----
CREATE TABLE cities_ab
PARTITION OF cities
FOR VALUES FROM (NULL) TO (42)
----
